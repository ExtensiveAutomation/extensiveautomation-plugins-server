<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>27/10/2016 23:06:21</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><name>AGENT_SYSTEM</name><type>json</type><description /><value>{"name": "agent.ssh", "type": "ssh"}</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>SYS_AGT_SUPPORT</name><description>Connect through ssh to the remote server</description><value>False</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>SYS_DEST_HOST</name><description>Connect through ssh to the remote server</description><value>10.0.0.240</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>SYS_DEST_PORT</name><description>Connect through ssh to the remote server</description><value>22</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>SYS_LOGIN</name><description>Connect through ssh to the remote server</description><value>root</value><color /><scope>local</scope></parameter><parameter><type>pwd</type><name>SYS_PWD</name><description>Connect through ssh to the remote server</description><value>bonjour</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>SYS_SCREEN_2</name><description>Wait the root prompt</description><value>root@</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_SYS</name><description /><value>20.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_SYSTEM</name><description /><value /><type>ssh</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="Testcase generated by test assistant")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="Connect through ssh to the remote server\n- Wait the root prompt\n- Close the session", summary="Connect through ssh to the remote server\n- Wait the root prompt\n- Close the session", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_SYS = SutAdapters.SSH.Terminal(parent=self, destIp=input('SYS_DEST_HOST'),destPort=input('SYS_DEST_PORT'),login=input('SYS_LOGIN'),password=input('SYS_PWD'),agent=input('AGENT_SYSTEM'),debug=input('DEBUG'),agentSupport=input('SYS_AGT_SUPPORT') )

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE_SYS>Connect through ssh to the remote server
		SYS_RET1 = self.ADP_SYS.doSession(timeout=input('TIMEOUT_SYS'))
		if not SYS_RET1:
			self.abort("Unable to connect through ssh to the remote server")
	
		##CAPTURE_SYS>Wait the root prompt
		SYS_RET2 = self.ADP_SYS.hasReceivedScreen(timeout=input('TIMEOUT_SYS'), text=TestOperators.Contains(needle=input('SYS_SCREEN_2')))
		if not SYS_RET2:
			self.abort("Unable to wait the root prompt")
	
		##CAPTURE_SYS>Close the session
		SYS_RET3 = self.ADP_SYS.doClose(timeout=input('TIMEOUT_SYS'))
		if not SYS_RET3:
			self.abort("Unable to close the session")
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1477602381.723211</testdevelopment>
</file>