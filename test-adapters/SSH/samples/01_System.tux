<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>10/03/2017 09:11:15</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><color /><description /><type>bool</type><name>DEBUG</name><value>False</value><scope>local</scope></parameter><parameter><color /><description /><type>bool</type><name>SYS_AGT_SUPPORT</name><value>False</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_CACHE_6</name><value>hdgfhgdfh</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_CACHE_7</name><value>bbbbb</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_DEST_HOST</name><value>hdgf</value><scope>local</scope></parameter><parameter><color /><description /><type>int</type><name>SYS_DEST_PORT</name><value>22</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_LOGIN_KEY</name><value>hgdf</value><scope>local</scope></parameter><parameter><color /><description /><type>pwd</type><name>SYS_PWD_KEY</name><value>hgdf</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_SCREEN_7</name><value>aaaa</value><scope>local</scope></parameter><parameter><color /><description /><type>str</type><name>SYS_TEXT_4</name><value>hgdfhgf</value><scope>local</scope></parameter><parameter><color /><description /><type>float</type><name>TIMEOUT_SYS</name><value>20.0</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>ssh</type><name>AGENT_SYSTEM</name><value /></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="Testcase generated by test assistant")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_SYS = SutAdapters.SSH.Terminal(parent=self, destIp=input('SYS_DEST_HOST'),destPort=input('SYS_DEST_PORT'),login=Cache().get(name=input('SYS_LOGIN_KEY')),password=Cache().get(name=input('SYS_PWD_KEY')),agent=agent('AGENT_SYSTEM'),debug=input('DEBUG'),agentSupport=input('SYS_AGT_SUPPORT') )

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE_SYS>
		SYS_RET1 = self.ADP_SYS.doSession(timeout=input('TIMEOUT_SYS'))
		if not SYS_RET1:
			self.abort("Unable to ")
	
		##CAPTURE_SYS>
		SYS_RET2 = self.ADP_SYS.doClose(timeout=input('TIMEOUT_SYS'))
		if not SYS_RET2:
			self.abort("Unable to ")
	
		##CAPTURE_SYS>
		SYS_RET3 = self.ADP_SYS.doClear()
		if not SYS_RET3:
			self.abort("Unable to ")
	
		##CAPTURE_SYS>
		SYS_RET4 = self.ADP_SYS.doText(text=Cache().get(name=input('SYS_TEXT_4')))
		if not SYS_RET4:
			self.abort("Unable to ")
	
		##CAPTURE_SYS>
		SYS_RET5 = self.ADP_SYS.doShortcut(key=SutAdapters.SSH.KEY_CTRLC)
		if not SYS_RET5:
			self.abort("Unable to ")
	
		##CAPTURE_SYS>
		SYS_RET6 = self.ADP_SYS.hasReceivedScreen(timeout=input('TIMEOUT_SYS'), text=TestOperators.Any())
		if not SYS_RET6:
			self.abort("Unable to ")
		else:
			Cache().set(name=input('SYS_CACHE_6'), data=SYS_RET6.get('TERM', 'data'))
	
		##CAPTURE_SYS>
		SYS_RET7 = self.ADP_SYS.hasReceivedScreen(timeout=input('TIMEOUT_SYS'), text=TestOperators.Contains(needle=Cache().get(name=input('SYS_SCREEN_7'))))
		if not SYS_RET7:
			self.abort("Unable to ")
		else:
			Cache().set(name=input('SYS_CACHE_7'), data=SYS_RET7.get('TERM', 'data'))
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1489133475.739398</testdevelopment>
</file>