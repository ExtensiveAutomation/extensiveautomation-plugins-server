<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>02/07/2016 22:18:41</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><color /><description /><type>bool</type><name>DEBUG</name><value>False</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>date</type><name>DEFECT_CREATION_TIME</name><value>03/07/2016</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>int</type><name>DEFECT_CYCLE_ID</name><value>1</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_DESCRIPTION</name><value>test auto description</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_DETECTED_BY</name><value>denis</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_NAME</name><value>test auto</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_PRIORITY</name><value>U2-Medium</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_SEVERITY</name><value>G1-Major</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_STATUS</name><value>Created</value><scope>local</scope></parameter><parameter><color>#DBADFF</color><description /><type>str</type><name>DEFECT_USER04</name><value>Defect</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>str</type><name>QC_DOMAIN</name><value>test</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>pwd</type><name>QC_PASSWORD</name><value /><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>str</type><name>QC_PROJECT</name><value>myproject</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>str</type><name>QC_URL</name><value>http://127.0.0.1/</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>str</type><name>QC_USERNAME</name><value>admin</value><scope>local</scope></parameter><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter><parameter><color /><description /><type>bool</type><name>VERBOSE</name><value>True</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>dummy</type><name>AGENT</name><value>agent-dummy01</value></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose=description('summary'))
	self.setRequirement(requirement=description('requirement'))

	# steps description
	self.step1 = self.addStep(expected="Issue created", description="Create defect", summary="Create defect", enabled=True)
def prepare(self):
		
		self.QC = TestInteroperability.QualityCenter(parent=self, qcurl=input('QC_URL'), 
																																username=input('QC_USERNAME'), password=input('QC_PASSWORD'), 
																																domain=input('QC_DOMAIN'), project=input('QC_PROJECT'))
def definition(self):
	# starting initial step
	if self.step1.isEnabled():
		self.step1.start()

		if not self.QC.signin():
			self.abort("unable to connect")
		
		DF = self.QC.createIssue(defectName=input('DEFECT_NAME'), defectDescription=input('DEFECT_DESCRIPTION'), 
																				defectStatus=input('DEFECT_STATUS'), defectPriority=input('DEFECT_PRIORITY'), 
																				defectSeverity=input('DEFECT_SEVERITY'),  creationTime=input('DEFECT_CREATION_TIME'), 
																				detectedBy=input('DEFECT_DETECTED_BY'), cycleId=input('DEFECT_CYCLE_ID'), 
																				user01='', user02='', user03='', user04=input('DEFECT_USER04'))
		if DF is None:
			self.abort("unable to create issue")

		self.step1.setPassed(actual="defect created with success ID=%s" % DF)
		
def cleanup(self, aborted):
	if aborted: self.step1.setFailed(actual=aborted)
	
	self.QC.signout()]]></testdefinition>
<testdevelopment>1467490721.667363</testdevelopment>
</file>